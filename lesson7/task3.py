#3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
#Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
#Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, cell_unit_count: int):
        self.cell_unit_count = cell_unit_count

    def __str__(self):
        return f"Она состоит из {self.cell_unit_count} ячеек."


    def __add__(self, other):
        return Cell(self.cell_unit_count + other.cell_unit_count)

    def __sub__(self, other):
        if self.cell_unit_count > other.cell_unit_count:
            return Cell(self.cell_unit_count - other.cell_unit_count)
        else:
            print("Ошибка")

    def __mul__(self, other):
        return Cell(self.cell_unit_count * other.cell_unit_count)

    def __truediv__(self, other):
        return Cell(self.cell_unit_count // other.cell_unit_count)

    def make_order(self, units_per_row: int):
        row = ''
        full_rows = self.cell_unit_count // units_per_row
        incomplete_row = self.cell_unit_count % units_per_row

        for i in range(full_rows):
            row += "*" * units_per_row + '\\n'

        row += "*" * incomplete_row
        return row


cell1 = Cell(10)
cell2 = Cell(3)
print("Клетка 1: ", cell1)
print("Клетка 2: ", cell2)
print("Клетки 1 + 2: ", cell1 + cell2)
print("Клетка 1 - клетка 2: ", cell1 - cell2)
print("Клетка 1  x клетка 2: ", cell1 * cell2)
print("Клетка 1 / клетка 2: ", cell1 / cell2)

print(Cell(24))
print(Cell(24).make_order(5))
